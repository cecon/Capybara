<?xml version="1.0" encoding="UTF-8"?>
<cappy:script xmlns:cappy="https://schemas.cappy.dev" name="newtask" version="1.9">
  <about>
    <summary>Criar nova task atômica (≤3h) – fluxo scope-first.</summary>
    <command>#newtask</command>
    <notes>
      <note>LLM só preenche XML; criação física é via comandos VS Code.</note>
      <note>Não deve iniciar o desenvolvimento.</note>
      <note>Requer .cappy/stack.md validado.</note>
      <note>Fazer perguntas sempre no formato 1a1.</note>
    </notes>
  </about>

  <steps>
    <step id="1.check_active">
      <goal>Abortar se houver task ativa não pausada.</goal>
      <logic><![CDATA[
        run_vscode("cappy.getActiveTask");
        ts = read_text(".cappy/output.txt");
        if (!ts) stop_with_message("ERR:getActiveTask sem saída.");
        isActive = includes(ts, "<active>true</active>");
        file = extract(ts, "<file-path>", "</file-path>");
        if (isActive && file && !ends_with(file, ".paused.xml"))
          stop_with_message("ERR:Há task ativa. Pause antes de criar outra. HINT: use cappy:pause");
      ]]></logic>
    </step>

    <step id="2.load_context">
      <goal>Abortar se KnowStack inválido.</goal>
      <logic><![CDATA[
        cfg = required_read(".cappy/config.yaml|.cappy/config.json");
        stack = extract_kv(cfg, ["stack.source"], ".cappy/stack.md");
        ok = extract_kv(cfg, ["stack.validated"], false) == true && file_exists(stack);
        if (!ok) stop_with_message("ERR:KnowStack não validado. HINT: cappy:knowstack");
      ]]></logic>
    </step>

    <step id="3.scope_first">
      <goal>Coletar escopo e aplicar gate ≤3h.</goal>
      <logic><![CDATA[
        scope = ask_one("Escopo (1–2 linhas; imperativo):");
        acceptance = ask_one("Critérios de aceite objetivos:");
        area = ask_one("Área (frontend/backend/fullstack/mobile/devops):");
        paths = ask_one("Pastas/arquivos-alvo:");
        deps = ask_one("Dependências externas:");
        validation = ask_one("Validação (comandos/testes/URL):");
        estimate = parse_float(ask_one("Estimativa em horas (≤3):"));
        if (!estimate || estimate > 3)
          stop_with_message("ERR:Escopo não atômico (>3h). HINT:cappy:decompose");
        title = generate_title_from_scope(scope, "pt-BR");
      ]]></logic>
    </step>

    <step id="4.create_file">
      <goal>Gerar *.ACTIVE.xml e obter caminho/id.</goal>
      <logic><![CDATA[
        run_vscode("cappy.createTaskFile", {
          title, description: scope, area, estimate: estimate + "h",
          priority: extract_kv(cfg, ["defaults.priority"], "P2")
        });
        out = read_text(".cappy/output.txt");
        outpath = extract(out, "<file-path>", "</file-path>");
        task_id = extract(out, "<id>", "</id>");
        if (!outpath) stop_with_message("ERR:createTaskFile sem <file-path>.");
      ]]></logic>
      <output>task_id,outpath</output>
    </step>

    <step id="5.patch_xml">
      <goal>Preencher campos essenciais e marcar status=prepared.</goal>
      <logic><![CDATA[
        xml = read_text(outpath);
        xml = ensure_task_header(xml, task_id, "prepared");
        xml = upsert_tag(xml, "title", xml_escape(title));
        xml = ensure_meta(xml, { updatedAt: now_iso(), estimate: estimate + "h" });
        xml = upsert_block(xml, "goals", `<goal>${xml_escape(scope)}</goal>`);
        xml = upsert_block(xml, "constraints", `<constraint>Não alterar fora de ${xml_escape(paths)}</constraint>`);
        xml = upsert_block(xml, "steps",
          `<steps current="1">
             <step id="1" required="true" status="pending">
               <desc>Primeiro resultado concreto.</desc>
               <inputs>${xml_escape(deps)}</inputs>
               <doneWhen>${xml_escape(acceptance)}</doneWhen>
               <validation>${xml_escape(validation)}</validation>
               <evidence></evidence>
             </step>
           </steps>`);
        write_file(outpath, xml);
        say(`OK:Task preparada\nid=${task_id}\nfile=${outpath}\nHINT: cappy:taskstatus para iniciar`);
      ]]></logic>
    </step>
  </steps>
</cappy:script>
