<?xml version="1.0" encoding="UTF-8"?>
<capy:script name="create-task" version="1.0">
  <about>
    <summary>Creates a new atomic task XML file. Does not start or work on the task.</summary>
    <command>cappy:newtask</command>
    <notes>
      <note>Keep scope atomic (2-3 hours max).</note>
      <note>Only create the XML task file. Do not proceed with execution.</note>
    </notes>
  </about>

  <steps>
    <step id="1.check_active">
      <goal>Check for active or paused tasks and ask to pause before creating a new one.</goal>
      <logic>
        <![CDATA[
        tasks = list_files(".capy/tasks/*.xml")
        for (t in tasks) {
          x = read_xml(t)
          if (x.metadata.status in ["in-progress", "preparing", "paused"]) {
            ask_user("There is an active task: '" + x.metadata.title + "'. Pause it to create a new one? (yes/no)")
            if (user_answer == "no") return
          }
        }
        ]]>
      </logic>
    </step>

    <step id="2.context_read">
      <goal>Read minimal context required to create the task.</goal>
      <logic>
        <![CDATA[
        prevention_rules = optional_read(".capy/prevention-rules.md")
        project_config   = optional_read(".capy/config.yaml|.capy/config.json")
        patterns         = optional_read(".capy/instructions/capybara-patterns.md")
        ]]>
      </logic>
    </step>

  <step id="3.atomicity_gate">
      <goal>Ensure the requested task is atomic; suggest decomposition otherwise.</goal>
      <logic>
        <![CDATA[
        if (estimated_effort_hours > 3) {
          suggest_decomposition_using(patterns)
          stop_with_message("Task not created: scope is not atomic. Split into smaller steps.")
        }
        ]]>
      </logic>
    </step>

    <step id="4.collect_min_fields">
      <goal>Collect title, area, main tech, and a short description if not provided via args.</goal>
      <inputs>
        <arg name="title" required="true" example="Setup Supabase auth config" />
        <arg name="area"  required="true" values="frontend,backend,fullstack,mobile,devops" />
        <arg name="tech"  required="false" example="nodejs" />
        <arg name="description" required="false" />
      </inputs>
      <logic>
        <![CDATA[
        ensure_args(["title","area"]) // ask one-by-one if missing
        ]]>
      </logic>
    </step>

    <step id="5.generate_filename">
      <goal>Generate file name using timestamp and kebab-case title.</goal>
      <logic>
        <![CDATA[
        ts = unix_timestamp()
        kebab = kebab_case(args.title)
        filename = `STEP_${ts}_${kebab}.xml`
        outpath = `.capy/tasks/${filename}`
        ]]>
      </logic>
    </step>

    <step id="6.write_task_xml">
      <goal>Write the task XML with required structure and defaults.</goal>
      <template>
        <![CDATA[
<task id="{{ kebab }}" version="1.0">
  <metadata>
    <title>{{ args.title }}</title>
    <description>{{ args.description || ("Atomic task: " + args.title) }}</description>
  <status>preparing</status>
    <progress>0/1</progress>
  </metadata>
  <context>
    <area>{{ args.area }}</area>
    <technology main="{{ args.tech || 'unknown' }}" version=""/>
    <dependencies>
      <!-- List required libraries if known; may be empty at creation time -->
    </dependencies>
    <files>
      <!-- Enumerate files once known during execution; empty on creation is acceptable -->
    </files>
  </context>
  <steps>
    <step id="step001" order="1" completed="false" required="true">
      <title>Describe the concrete outcome</title>
      <description>Define the first concrete implementation step for this task.</description>
      <criteria>
        <criterion>Build succeeds</criterion>
        <criterion>Unit test(s) for this step pass</criterion>
      </criteria>
      <files>
        <!-- Add file paths touched by this step when known -->
      </files>
      <dependencies>
        <!-- Optional per-step dependencies -->
      </dependencies>
      <validation>
        <command>npm run test</command>
        <metric>tests_passed >= 1</metric>
      </validation>
    </step>
  </steps>
  <validation>
  <checklist>
      <item>All required steps completed</item>
      <item>All required files created</item>
      <item>Code compiles without errors</item>
      <item>No linting warnings</item>
    </checklist>
  </validation>
</task>
        ]]>
      </template>
      <logic>
        <![CDATA[
        xml = render_template(template, { args, kebab })
        write_file(outpath, xml)
        ]]>
      </logic>
    </step>

  <step id="7.confirm">
      <goal>Confirm creation and path to the user. Do not start the task.</goal>
      <logic>
        <![CDATA[
  say(`Task created: ${filename}\nLocation: ${outpath}\nUse 'cappy:run exe:' when ready to execute.`)
        ]]>
      </logic>
    </step>
  </steps>
</capy:script>
